var request = require('request')

var api = { version: 1, url: 'http://ws.spotify.com' };

/**
* Looks up a specific artist, album or track and gives the user
* useful metadata about it.
*
* http://developer.spotify.com/en/metadata-api/lookup/
*
* @param {String | Object} options Either a Spotify URI as string, or an Object containing options.
* @param {Function} callback This function will be called once the request completes.
*/
exports.lookup = function (options, callback) {
  var url = api.url + '/lookup/' + api.version + '/.json?'
    // If first argument is a string, then treat that as the uri.
    + 'uri=' + (typeof options === 'string' ? options : options.uri)
    + (options.extras ? '&extras=' + options.extras.join(',') : '')

  return request({url: url, json: true}, callback)
}

/**
* Looks up a specific artist, album or track and gives the user
* useful metadata about it.
*
* http://developer.spotify.com/en/metadata-api/search/
*
* @param {Object} q An Object containing options, "q" and "method" are requred properties.
* @param {Function} callback This function will be called once the request completes.
*/
exports.search = function (options, callback) {
  var url = api.url + '/search/' + api.version + '/' + options.method + '.json?'
    + 'q=' + encodeURIComponent(options.q)
    + (options.page ? '&page=' + options.page : '')

  return request({url: url, json: true}, callback)
}

/**
* Converts a HTTP Link to a Spotify URI
* @example: http://open.spotify.com/artist/6jLA0283VwdkRwSPkyCCAm => spotify:artist:6jLA0283VwdkRwSPkyCCAm
*
* @param {String} link The HTTP Link to be converted.
* @return {String} Spotify URI
*/
exports.httpToUri = function (link) {
  return link.replace(/^http:\/\/open.spotify.com\/(\w+?)\/(\w+)$/, 'spotify:$1:$2')
}

/**
* Converts a Spotify URI to a HTTP Link.
* @example spotify:artist:6jLA0283VwdkRwSPkyCCAm => http://open.spotify.com/artist/6jLA0283VwdkRwSPkyCCAm
*
* @param {String} uri The Spotify URI to be converted.
* @return {String} HTTP Link
*/
exports.uriToHttp = function (uri) {
  return uri.replace(/^spotify:(\w+?):(\w+)$/, 'http://open.spotify.com/$1/$2')
}
